version: '3.8'

services:

  # ------------------------------------
  # DATABASES
  # ------------------------------------

  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
      POSTGRES_DB: devdb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  mysql:
    image: mysql:8
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: devdb
      MYSQL_USER: devuser
      MYSQL_PASSWORD: devpass
    ports:
      - "3306:3306"
    volumes:
      - mysqldata:/var/lib/mysql

  mariadb:
    image: mariadb:11
    container_name: mariadb
    restart: unless-stopped
    environment:
      MARIADB_ROOT_PASSWORD: rootpass
      MARIADB_DATABASE: devdb
      MARIADB_USER: devuser
      MARIADB_PASSWORD: devpass
    ports:
      - "3307:3306"
    volumes:
      - mariadbdata:/var/lib/mysql

  mongo:
    image: mongo:7
    container_name: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodata:/data/db

  redis:
    image: redis:7
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"

  # ------------------------------------
  # UI TOOLS / ADMIN
  # ------------------------------------

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - postgres

  adminer:
    image: adminer
    container_name: adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - mariadb

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
    ports:
      - "8082:80"
    depends_on:
      - mysql

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
    ports:
      - "8083:8081"
    depends_on:
      - mongo

  # ------------------------------------
  # FULL STACK APPS / BACKEND / FRONTEND
  # ------------------------------------

  fastapi:
    image: tiangolo/uvicorn-gunicorn-fastapi:python3.11
    container_name: fastapi
    restart: unless-stopped
    volumes:
      - ./apps/fastapi:/app
    ports:
      - "8000:80"

  springboot:
    image: openjdk:17
    container_name: springboot
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./apps/springboot:/app
    command: ["java", "-jar", "app.jar"]
    ports:
      - "8081:8080"

  vite:
    image: node:18
    container_name: vite
    restart: unless-stopped
    working_dir: /app
    command: sh -c "npm install && npm run dev"
    volumes:
      - ./apps/vite:/app
    ports:
      - "5173:5173"

  # ------------------------------------
  # DEVOPS TOOLS
  # ------------------------------------

  code-server:
    image: codercom/code-server
    container_name: code-server
    restart: unless-stopped
    environment:
      PASSWORD: devpass
    ports:
      - "8443:8443"
    volumes:
      - ./code:/home/coder/project

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: unless-stopped
    ports:
      - "9002:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    restart: unless-stopped
    user: root
    ports:
      - "8085:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafanadata:/var/lib/grafana

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8089:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"

  promtail:
    image: grafana/promtail:2.9.3
    container_name: promtail
    restart: unless-stopped
    volumes:
      - ./configs/promtail-config.yaml:/etc/promtail/promtail.yaml:ro
      - /var/log:/var/log
    command: -config.file=/etc/promtail/promtail.yaml

  vault:
    image: vault:1.13
    container_name: vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: devtoken
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    cap_add:
      - IPC_LOCK

  # ------------------------------------
  # API TOOLS
  # ------------------------------------

  pgweb:
    image: sosedoff/pgweb
    container_name: pgweb
    restart: unless-stopped
    ports:
      - "8084:8081"
    environment:
      - DATABASE_URL=postgres://devuser:devpass@postgres:5432/devdb?sslmode=disable
    depends_on:
      - postgres

  metabase:
    image: metabase/metabase
    container_name: metabase
    restart: unless-stopped
    ports:
      - "3001:3000"

  postgrest:
    image: postgrest/postgrest
    container_name: postgrest
    restart: unless-stopped
    environment:
      PGRST_DB_URI: postgres://devuser:devpass@postgres:5432/devdb
      PGRST_DB_ANON_ROLE: web_anon
    ports:
      - "3002:3000"
    depends_on:
      - postgres

  hasura:
    image: hasura/graphql-engine
    container_name: hasura
    restart: unless-stopped
    ports:
      - "8086:8080"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://devuser:devpass@postgres:5432/devdb
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
    depends_on:
      - postgres

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro

volumes:
  pgdata:
  mysqldata:
  mariadbdata:
  mongodata:
  portainer_data:
  jenkins_home:
  grafanadata:
